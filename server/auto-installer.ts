import { Pool } from 'pg';

// Interface para m√≥dulos adicionais do sistema
export interface DatabaseModule {
  name: string;
  tables: string;
  initialData?: string;
  description: string;
}

// Lista de m√≥dulos adicionais que podem ser instalados
export const availableModules: DatabaseModule[] = [
  // M√≥dulos futuros podem ser adicionados aqui
  // {
  //   name: 'notifications',
  //   description: 'Sistema de notifica√ß√µes',
  //   tables: `CREATE TABLE IF NOT EXISTS notifications (...);`,
  //   initialData: `INSERT INTO notifications (...) VALUES (...);`
  // }
];

export async function createDatabaseTables(databaseUrl: string): Promise<boolean> {
  console.log('[auto-installer] Iniciando cria√ß√£o autom√°tica das tabelas...');
  
  const pool = new Pool({
    connectionString: databaseUrl,
    ssl: databaseUrl.includes('sslmode=require') ? { rejectUnauthorized: false } : false
  });

  try {
    const client = await pool.connect();
    
    console.log('[auto-installer] Conectado ao banco PostgreSQL');
    
    // SQL completo para criar todas as tabelas
    const createTablesSQL = `
    -- Criar todas as tabelas do Monte Everest
    BEGIN;

    -- Tabela de usu√°rios/admin
    CREATE TABLE IF NOT EXISTS users (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR NOT NULL UNIQUE,
        password TEXT NOT NULL,
        full_name VARCHAR,
        role VARCHAR NOT NULL DEFAULT 'admin',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de categorias
    CREATE TABLE IF NOT EXISTS categories (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR NOT NULL,
        slug VARCHAR NOT NULL UNIQUE,
        description TEXT,
        icon VARCHAR,
        is_active BOOLEAN DEFAULT true,
        is_popular BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de planos de assinatura
    CREATE TABLE IF NOT EXISTS subscription_plans (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR NOT NULL,
        description TEXT,
        monthly_price DECIMAL(10,2) NOT NULL,
        yearly_price DECIMAL(10,2),
        features JSONB,
        max_contacts INTEGER,
        max_photos INTEGER DEFAULT 5,
        priority INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        is_featured BOOLEAN DEFAULT false,
        pagarme_product_id VARCHAR,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de profissionais
    CREATE TABLE IF NOT EXISTS professionals (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        full_name VARCHAR NOT NULL,
        email VARCHAR NOT NULL UNIQUE,
        password TEXT,
        phone VARCHAR NOT NULL,
        document VARCHAR NOT NULL UNIQUE,
        category_id VARCHAR NOT NULL,
        subscription_plan_id VARCHAR,
        service_area VARCHAR NOT NULL,
        city VARCHAR NOT NULL,
        description TEXT NOT NULL,
        profile_image TEXT,
        portfolio JSONB,
        website VARCHAR,
        social_media JSONB,
        working_hours JSONB,
        status VARCHAR NOT NULL DEFAULT 'pending',
        payment_status VARCHAR NOT NULL DEFAULT 'pending',
        last_payment_date TIMESTAMP,
        next_payment_date TIMESTAMP,
        subscription_expires_at TIMESTAMP,
        photo VARCHAR,
        rating DECIMAL(3,2) DEFAULT 0.00,
        total_reviews INTEGER DEFAULT 0,
        ranking_position INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de avalia√ß√µes
    CREATE TABLE IF NOT EXISTS reviews (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        professional_id VARCHAR NOT NULL,
        customer_name VARCHAR NOT NULL,
        customer_email VARCHAR NOT NULL,
        rating INTEGER NOT NULL,
        comment TEXT,
        is_verified BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de pagamentos
    CREATE TABLE IF NOT EXISTS payments (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        professional_id VARCHAR NOT NULL,
        subscription_plan_id VARCHAR,
        amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR DEFAULT 'BRL',
        status VARCHAR NOT NULL DEFAULT 'pending',
        transaction_id VARCHAR,
        pagarme_subscription_id VARCHAR,
        payment_method VARCHAR,
        due_date TIMESTAMP,
        paid_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de contatos
    CREATE TABLE IF NOT EXISTS contacts (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        professional_id VARCHAR NOT NULL,
        client_name VARCHAR NOT NULL,
        client_email VARCHAR,
        client_phone VARCHAR,
        message TEXT,
        contact_type VARCHAR NOT NULL DEFAULT 'whatsapp',
        ip_address VARCHAR,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de logs do sistema
    CREATE TABLE IF NOT EXISTS system_logs (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id VARCHAR,
        action VARCHAR NOT NULL,
        entity_type VARCHAR,
        entity_id VARCHAR,
        details JSONB,
        ip_address VARCHAR,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de configura√ß√µes do sistema
    CREATE TABLE IF NOT EXISTS system_configs (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        key VARCHAR NOT NULL UNIQUE,
        value TEXT NOT NULL,
        description TEXT,
        is_secret BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tabela de p√°ginas
    CREATE TABLE IF NOT EXISTS pages (
        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
        title VARCHAR NOT NULL,
        slug VARCHAR NOT NULL UNIQUE,
        content TEXT NOT NULL,
        meta_description TEXT,
        meta_keywords TEXT,
        is_active BOOLEAN DEFAULT true,
        show_in_footer BOOLEAN DEFAULT true,
        sort_order INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Criar √≠ndices para performance
    CREATE INDEX IF NOT EXISTS professionals_category_idx ON professionals(category_id);
    CREATE INDEX IF NOT EXISTS professionals_service_area_idx ON professionals(service_area);
    CREATE INDEX IF NOT EXISTS professionals_status_idx ON professionals(status);
    CREATE INDEX IF NOT EXISTS professionals_rating_idx ON professionals(rating);
    CREATE INDEX IF NOT EXISTS reviews_professional_idx ON reviews(professional_id);
    CREATE INDEX IF NOT EXISTS reviews_rating_idx ON reviews(rating);
    CREATE INDEX IF NOT EXISTS reviews_created_at_idx ON reviews(created_at);

    -- Inserir categorias iniciais
    INSERT INTO categories (name, slug, description, icon, is_active, is_popular) VALUES
        ('Encanador', 'encanador', 'Servi√ßos de encanamento e hidr√°ulica', 'üîß', true, true),
        ('Eletricista', 'eletricista', 'Servi√ßos el√©tricos residenciais e comerciais', '‚ö°', true, true),
        ('Pedreiro', 'pedreiro', 'Constru√ß√£o e reformas em geral', 'üß±', true, true),
        ('Pintor', 'pintor', 'Pintura residencial e comercial', 'üé®', true, true),
        ('Marceneiro', 'marceneiro', 'M√≥veis e estruturas de madeira', 'ü™ö', true, false),
        ('Jardineiro', 'jardineiro', 'Cuidados com jardins e paisagismo', 'üå±', true, false),
        ('Limpeza', 'limpeza', 'Servi√ßos de limpeza residencial e comercial', 'üßΩ', true, true),
        ('Montador', 'montador', 'Montagem de m√≥veis e equipamentos', 'üî®', true, false),
        ('Chaveiro', 'chaveiro', 'Servi√ßos de chaveiro e fechaduras', 'üóùÔ∏è', true, false),
        ('Vidraceiro', 'vidraceiro', 'Instala√ß√£o e reparo de vidros', 'üî≤', true, false)
    ON CONFLICT (slug) DO NOTHING;

    -- Inserir planos de assinatura iniciais
    INSERT INTO subscription_plans (name, description, monthly_price, features, max_contacts, is_active, is_featured) VALUES
        ('Plano B√°sico', 'Plano b√°sico para profissionais', 29.90, '["Perfil completo", "At√© 50 contatos/m√™s", "5 fotos no portf√≥lio"]', 50, true, true),
        ('Plano Premium', 'Plano premium com recursos avan√ßados', 59.90, '["Perfil destacado", "Contatos ilimitados", "20 fotos no portf√≥lio", "Suporte priorit√°rio"]', null, true, true)
    ON CONFLICT DO NOTHING;

    -- Inserir p√°ginas iniciais do sistema
    INSERT INTO pages (title, slug, content, meta_description, is_active, show_in_footer, sort_order) VALUES
        ('Sobre N√≥s', 'sobre', 
         '<h2>Sobre o Monte Everest</h2>
         <p>O Monte Everest √© a principal plataforma de conex√£o entre profissionais qualificados e clientes que buscam servi√ßos de excel√™ncia.</p>
         <p>Nossa miss√£o √© facilitar o encontro entre quem precisa de um servi√ßo e quem tem a compet√™ncia para realiz√°-lo, promovendo neg√≥cios justos e transparentes.</p>
         <h3>Nossos Valores</h3>
         <ul>
         <li><strong>Qualidade:</strong> Conectamos apenas profissionais verificados</li>
         <li><strong>Transpar√™ncia:</strong> Reviews e avalia√ß√µes reais dos clientes</li>
         <li><strong>Confian√ßa:</strong> Sistema seguro de pagamentos e contatos</li>
         </ul>', 
         'Conhe√ßa o Monte Everest, plataforma que conecta profissionais qualificados com clientes', true, true, 1),
        
        ('Termos de Uso', 'termos-de-uso',
         '<h2>Termos de Uso</h2>
         <p><strong>√öltima atualiza√ß√£o:</strong> ' || CURRENT_DATE || '</p>
         
         <h3>1. Aceita√ß√£o dos Termos</h3>
         <p>Ao utilizar o Monte Everest, voc√™ concorda com estes termos de uso.</p>
         
         <h3>2. Descri√ß√£o do Servi√ßo</h3>
         <p>O Monte Everest √© uma plataforma que conecta prestadores de servi√ßos com potenciais clientes.</p>
         
         <h3>3. Responsabilidades do Usu√°rio</h3>
         <p>Os usu√°rios devem fornecer informa√ß√µes verdadeiras e manter seus dados atualizados.</p>
         
         <h3>4. Responsabilidades dos Profissionais</h3>
         <p>Profissionais devem prestar servi√ßos com qualidade e dentro dos prazos acordados.</p>
         
         <h3>5. Pagamentos</h3>
         <p>Os pagamentos de assinaturas s√£o processados mensalmente atrav√©s do sistema Pagar.me.</p>
         
         <h3>6. Contato</h3>
         <p>Para d√∫vidas sobre estes termos, entre em contato atrav√©s do nosso suporte.</p>',
         'Termos de uso da plataforma Monte Everest', true, true, 2),
        
        ('Pol√≠tica de Privacidade', 'politica-privacidade',
         '<h2>Pol√≠tica de Privacidade</h2>
         <p><strong>√öltima atualiza√ß√£o:</strong> ' || CURRENT_DATE || '</p>
         
         <h3>1. Coleta de Informa√ß√µes</h3>
         <p>Coletamos apenas as informa√ß√µes necess√°rias para o funcionamento da plataforma.</p>
         
         <h3>2. Uso das Informa√ß√µes</h3>
         <p>Suas informa√ß√µes s√£o utilizadas para:</p>
         <ul>
         <li>Conectar voc√™ com profissionais ou clientes</li>
         <li>Processar pagamentos de forma segura</li>
         <li>Melhorar nossos servi√ßos</li>
         <li>Enviar comunica√ß√µes importantes</li>
         </ul>
         
         <h3>3. Compartilhamento de Dados</h3>
         <p>N√£o compartilhamos seus dados pessoais com terceiros, exceto quando necess√°rio para o funcionamento do servi√ßo.</p>
         
         <h3>4. Seguran√ßa</h3>
         <p>Utilizamos as melhores pr√°ticas de seguran√ßa para proteger suas informa√ß√µes.</p>
         
         <h3>5. Seus Direitos</h3>
         <p>Voc√™ tem direito a acessar, corrigir ou excluir seus dados pessoais a qualquer momento.</p>
         
         <h3>6. Contato</h3>
         <p>Para quest√µes sobre privacidade, entre em contato atrav√©s do nosso suporte.</p>',
         'Pol√≠tica de privacidade do Monte Everest', true, true, 3),
        
        ('Contato', 'contato',
         '<h2>Entre em Contato</h2>
         <p>Estamos aqui para ajudar! Entre em contato conosco atrav√©s dos canais abaixo:</p>
         
         <h3>üìß Email</h3>
         <p><strong>Suporte Geral:</strong> contato@monteeverest.com</p>
         <p><strong>Suporte Profissionais:</strong> profissionais@monteeverest.com</p>
         <p><strong>Parcerias:</strong> parceiros@monteeverest.com</p>
         
         <h3>üì± WhatsApp</h3>
         <p><strong>Atendimento:</strong> (11) 99999-9999</p>
         <p><em>Hor√°rio: Segunda a Sexta, 8h √†s 18h</em></p>
         
         <h3>üè¢ Endere√ßo</h3>
         <p>Monte Everest Servi√ßos Ltda<br>
         Rua das Palmeiras, 123<br>
         S√£o Paulo - SP, 01234-567</p>
         
         <h3>‚è∞ Hor√°rio de Atendimento</h3>
         <p><strong>Segunda a Sexta:</strong> 8h √†s 18h<br>
         <strong>S√°bado:</strong> 9h √†s 14h<br>
         <strong>Domingo:</strong> Fechado</p>',
         'Entre em contato com o Monte Everest', true, true, 4)
    ON CONFLICT (slug) DO NOTHING;

    -- Inserir avalia√ß√µes iniciais de exemplo (apenas se profissionais existirem)
    DO $$
    DECLARE
        prof_id VARCHAR;
    BEGIN
        -- Buscar um profissional existente para as avalia√ß√µes de exemplo
        SELECT id INTO prof_id FROM professionals LIMIT 1;
        
        -- Se existe profissional, inserir avalia√ß√µes de exemplo
        IF prof_id IS NOT NULL THEN
            INSERT INTO reviews (professional_id, customer_name, customer_email, rating, comment, is_verified) VALUES
                (prof_id, 'Maria Silva', 'maria@email.com', 5, 'Excelente profissional! Muito atencioso e pontual. Recomendo!', true),
                (prof_id, 'Jo√£o Santos', 'joao@email.com', 4, 'Bom trabalho, ficou conforme solicitado. Entrega no prazo.', true),
                (prof_id, 'Ana Costa', 'ana@email.com', 5, 'Superou minhas expectativas! Qualidade excepcional do servi√ßo.', true)
            ON CONFLICT DO NOTHING;
        END IF;
    END $$;

    COMMIT;
    `;

    console.log('[auto-installer] Executando SQL de cria√ß√£o das tabelas...');
    
    await client.query(createTablesSQL);
    
    console.log('[auto-installer] ‚úÖ Todas as tabelas criadas com sucesso!');
    
    // Instalar m√≥dulos adicionais, se existirem
    if (availableModules.length > 0) {
      console.log('[auto-installer] Instalando m√≥dulos adicionais...');
      for (const module of availableModules) {
        console.log(`[auto-installer] Instalando m√≥dulo: ${module.name}`);
        try {
          if (module.tables) {
            await client.query(module.tables);
          }
          if (module.initialData) {
            await client.query(module.initialData);
          }
          console.log(`[auto-installer] ‚úÖ M√≥dulo ${module.name} instalado com sucesso!`);
        } catch (moduleError) {
          console.error(`[auto-installer] ‚ö†Ô∏è Erro ao instalar m√≥dulo ${module.name}:`, moduleError);
          // Continua com outros m√≥dulos mesmo se um falhar
        }
      }
    }
    
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    console.error('[auto-installer] ‚ùå Erro ao criar tabelas:', error);
    await pool.end();
    return false;
  }
}

export async function checkDatabaseConnection(databaseUrl: string): Promise<boolean> {
  const pool = new Pool({
    connectionString: databaseUrl,
    ssl: databaseUrl.includes('sslmode=require') ? { rejectUnauthorized: false } : false
  });

  try {
    const client = await pool.connect();
    await client.query('SELECT NOW()');
    client.release();
    await pool.end();
    console.log('[auto-installer] ‚úÖ Conex√£o com banco testada com sucesso');
    return true;
  } catch (error) {
    console.error('[auto-installer] ‚ùå Erro ao conectar com banco:', error);
    await pool.end();
    return false;
  }
}

// Fun√ß√£o para instalar um m√≥dulo espec√≠fico
export async function installDatabaseModule(databaseUrl: string, module: DatabaseModule): Promise<boolean> {
  console.log(`[auto-installer] Instalando m√≥dulo espec√≠fico: ${module.name}`);
  
  const pool = new Pool({
    connectionString: databaseUrl,
    ssl: databaseUrl.includes('sslmode=require') ? { rejectUnauthorized: false } : false
  });

  try {
    const client = await pool.connect();
    
    if (module.tables) {
      console.log(`[auto-installer] Criando tabelas do m√≥dulo ${module.name}...`);
      await client.query(module.tables);
    }
    
    if (module.initialData) {
      console.log(`[auto-installer] Inserindo dados iniciais do m√≥dulo ${module.name}...`);
      await client.query(module.initialData);
    }
    
    console.log(`[auto-installer] ‚úÖ M√≥dulo ${module.name} instalado com sucesso!`);
    
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    console.error(`[auto-installer] ‚ùå Erro ao instalar m√≥dulo ${module.name}:`, error);
    await pool.end();
    return false;
  }
}